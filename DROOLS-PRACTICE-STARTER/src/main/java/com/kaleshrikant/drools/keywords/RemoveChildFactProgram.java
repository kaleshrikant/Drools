package com.kaleshrikant.drools.keywords;

import com.kaleshrikant.drools.keywords.model.PersonaData;
import com.kaleshrikant.drools.keywords.model.DependentFact;
import org.kie.api.KieServices;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * üßπ RemoveChildFactProgram via Drools
 *
 * üßæ Removes DependentFact entries for senior PersonaData (age > 60)
 *    üë§ Matches parent by name
 *    üßπ Retracts associated child facts from working memory
 *
 * üì§ Inserts parent and child facts into KieSession
 * ‚úÖ Uses retract() to clean up dependents
 * üßπ Session disposed after rule execution
 *
 * üñ®Ô∏è Sample Output:
 *  üßπ Removed DependentFact for child 'ChildA' of senior 'Shrikant'
 *  üßπ Removed DependentFact for child 'ChildB' of senior 'Shrikant'
 *
 * @author Shrikant Kale
 * @Date 12 Sep 2025
 */

/*
   If the parent meets certain conditions (e.g. age > 60),
   remove all associated dependents from working memory.
 */

public class RemoveChildFactProgram {
	private static final Logger logger = LoggerFactory.getLogger(RemoveChildFactProgram.class);
	public static void main(String[] args) {
		// 1Ô∏è‚É£ Get KieServices
		KieServices kieServices = KieServices.Factory.get();

		// 1Ô∏è‚É£ Get KieContainer
		KieContainer kieContainer = kieServices.getKieClasspathContainer();

		// 2Ô∏è‚É£ Create KieSession directly
		KieSession kieSession = kieContainer.newKieSession("ksession-rules"); // match name in kmodule.xml

		// Inject logger into Drools
		kieSession.setGlobal("logger", logger);

		// 2Ô∏è‚É£ Fact Insertion
			// Insert parent facts
				kieSession.insert(new PersonaData("Shrikant", 65));
				kieSession.insert(new PersonaData("Meera", 45));

			// Insert child facts
				kieSession.insert(new DependentFact("Shrikant", "ChildA"));
				kieSession.insert(new DependentFact("Shrikant", "ChildB"));
				kieSession.insert(new DependentFact("Meera", "ChildC"));

		// 3Ô∏è‚É£ Fire all rules
		kieSession.fireAllRules();

		// 4Ô∏è‚É£ Dispose the session
		kieSession.dispose();
	}
}
